# -*- coding: utf-8 -*-
"""exponential_pest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IS0Wz0YeW-Q7mBTnvkceXUG3z_cXLMhi
"""

import numpy as np
import matplotlib.pyplot as plt
from math import exp, log
from scipy.special import factorial
np.random.seed(5)

def f_step(n_old, a):
  # returns Euler discretization of exponential dynamics
  # n(t+1) = Poiss(((1+a)*n(t))
  return np.random.poisson((1+a)*n_old)

def like_step(n_new, n_old, a):
  lam = n_old*(1+a)
  return lam**n_new * exp(-lam)/factorial(n_new)

def f_obs(n, delta):
  return np.random.poisson(delta*n)

def like_obs(obs, n, delta):
  lam = n*delta
  return lam**obs * exp(-lam)/factorial(obs)

def log_gen_poisson(lam, N_max):
  ks = np.arange(1,N_max)
  if lam < 1e-7:
    logterm = [-100 for j in range(N_max-1)]
  else:
    logterm = ks*log(lam) - lam - np.cumsum(np.log(ks))
  logterm_full = np.concatenate(([-lam], logterm))
  return (logterm_full)

def log_gen_poisson2(k, N_max):
  ks = np.arange(1,N_max)
  if k == 0:
    element0 = 0
  else: 
    element0 = -100
  return np.concatenate(([element0], k * np.log(ks*delta) - ks*delta - np.sum(np.log(np.arange(1,k)))))
  #return (ks*delta)**k * np.exp(-ks*delta)/factorial(k)

def resample(xs, weights, N=None):
  # we assume number of parameters is first dimension
  if N is None:
    N = xs.shape[0]
  weights_cumul = np.cumsum(weights)/np.sum(weights)
  alpha = np.random.uniform(size=N)
  indices = np.searchsorted(weights_cumul, alpha)
  if xs.ndim > 1:
    return xs[indices,...]
  else:
    return xs[indices]

# example data
a = 0.1
n0 = 10
delta = 0.01
N_time = 50

ns = np.zeros(N_time)
ns[0] = n0

obs = np.zeros(N_time)
obs[0] = f_obs(n0, delta)

for m in range(N_time-1):
  ns[m+1] = f_step(ns[m], a)
  obs[m+1] = f_obs(ns[m+1], delta)

fig, [ax0,ax1] = plt.subplots(2,1)
ax0.plot(ns)
ax0.set_title("population")
ax1.plot(obs);
ax1.set_title("observation");
fig.tight_layout();

"""Inference

completely new approach now
"""

N_part = 1000
particles = np.zeros((N_part, 2)) # first col is a, second col is n
particles[:,0] = np.random.uniform(-.5,.5,N_part)
particles[:,1] = np.random.randint(0,1001,N_part)
plt.figure(figsize=(10,10))
plt.subplot(2,2,1)
plt.scatter(particles[:,0], particles[:,1])
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.title("prior")
plt.ylim([0,1001])
plt.xlim([-.5,.5])

obs

"""now incorporate first observation"""

weights = np.array([like_obs(obs[0], particles[m, 1], delta) for m in range(N_part)])

plt.subplot(2,2,2)
plt.scatter(particles[:,0], particles[:,1], s=20*weights);
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.title("weighted by likelihood")
plt.ylim([0,1001])
plt.xlim([-.5,.5])

"""resample to get unweighted samples"""

particles0_post = resample(particles, weights)

plt.subplot(2,2,3)
plt.scatter(particles0_post[:,0], particles0_post[:,1], s=5, label="particles")
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.ylim([0,1001])
plt.xlim([-.5,.5])

plt.title("resampled")

"""rejuvenate ("jitter") particles"""


plt.subplot(2,2,4)
particles0_post[:,0] = (particles0_post[:,0] + np.random.normal(0,0.01,N_part))
particles0_post[:,1] = np.maximum(0, particles0_post[:,1] + np.random.normal(0,10,N_part))
plt.scatter(particles0_post[:,0], particles0_post[:,1], s=5, label="particles")
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.title("rejuvenated")
plt.ylim([0,1001])
plt.xlim([-.5,.5])



"""**Now next timestep**: Push forward first"""

new_pos = np.array([f_step(particles0_post[i, 1],particles0_post[i, 0] ) for i in range(N_part)])

particles1 = np.stack((particles0_post[:, 0], new_pos), axis=-1)
particles1.shape

plt.figure()
plt.scatter(particles0_post[:,0], particles0_post[:,1], s=10)
plt.scatter(particles1[:,0], particles1[:,1], s=15)
for i in range(N_part):
  plt.arrow(particles0_post[i,0], particles0_post[i,1], particles1[i,0]-particles0_post[i,0], particles1[i,1]-particles0_post[i,1], length_includes_head=True, head_width=0.02, head_length=20)


plt.figure(figsize=(10,10))
plt.subplot(2,2,1)
plt.scatter(particles0_post[:,0], particles0_post[:,1]);
plt.plot(a, ns[1], 'r.', label="true value", markersize=15)
plt.legend()
plt.ylim([0,1001])
plt.xlim([-.5,.5])


"""now incorporate second observation"""
weights = np.array([like_obs(obs[1], particles1[m, 1], delta) for m in range(N_part)])
plt.subplot(2,2,2)
plt.scatter(particles1[:,0], particles1[:,1], s=20*weights);
plt.plot(a, ns[1], 'r.', label="true value", markersize=15)
plt.legend()
plt.ylim([0,1001])
plt.xlim([-.5,.5])

plt.subplot(2,2,3)
particles1_post = resample(particles1, weights)
plt.scatter(particles1_post[:,0], particles1_post[:,1], s=5, label="particles")
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.ylim([0,1001])
plt.xlim([-.5,.5])

plt.subplot(2,2,4)
particles1_post[:,0] = (particles1_post[:,0] + np.random.normal(0,0.01,N_part))
particles1_post[:,1] = np.maximum(0, particles1_post[:,1] + np.random.normal(0,10,N_part))
plt.scatter(particles1_post[:,0], particles1_post[:,1], s=5, label="particles")
plt.plot(a, ns[0], 'r.', label="true value", markersize=15)
plt.legend()
plt.ylim([0,1001])
plt.xlim([-.5,.5])

N_part = 3000
particles = np.zeros((N_part, 2)) # first col is a, second col is n
particles[:,0] = np.random.uniform(-.5,.5,N_part)
particles[:,1] = np.random.randint(0,1000,N_part)

plt.figure(figsize=(20,20))

particles_history = np.zeros((N_time,N_part,2))

for ind in range(0, N_time):
  new_pos = np.array([f_step(particles[i, 1],particles[i, 0] ) for i in range(N_part)])
  particles_new = np.stack((particles[:, 0], new_pos), axis=-1)
  weights = np.array([like_obs(obs[ind], particles_new[m, 1], delta) for m in range(N_part)])
  particles_new_res = resample(particles_new, weights)
  particles_new_res[:,0] = (particles_new_res[:,0] + np.random.normal(0,0.01,N_part))
  particles_new_res[:,1] = np.maximum(0, particles_new_res[:,1] + np.random.normal(0,10,N_part))
  particles = particles_new_res
  particles_history[ind,:,:] = particles
  if ind % 2 == 0:
    plt.subplot(6,6,ind//2+1)
    plt.scatter(particles[:,0], particles[:,1], s=5, label="particles")
    plt.plot(a, ns[ind], 'r.', label="true value", markersize=15)
    plt.xlim([-.5,.5])
    plt.ylim([0,1000])
    plt.title(ind)
    plt.legend()

fig, ax0 = plt.subplots(figsize=(10,5))
ax0.boxplot(particles_history[:,:,1].T);
ax0.plot(ns, label="population")
plt.legend()
plt.tight_layout()

fig, ax0 = plt.subplots(figsize=(10,5))
ax0.boxplot(particles_history[:,:,0].T);
ax0.hlines(a, 1, 50, color="blue", label="true param")
plt.legend()
plt.tight_layout()

